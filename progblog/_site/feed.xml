<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-08-03T12:59:09+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">ProgBlog</title><subtitle>A blog documenting progress</subtitle><entry><title type="html">Installing Tensorflow on WSL with CUDA support</title><link href="http://localhost:4000/workflow/2022/07/31/tensorflow-cuda-wsl.html" rel="alternate" type="text/html" title="Installing Tensorflow on WSL with CUDA support" /><published>2022-07-31T12:00:00+05:30</published><updated>2022-07-31T12:00:00+05:30</updated><id>http://localhost:4000/workflow/2022/07/31/tensorflow-cuda-wsl</id><content type="html" xml:base="http://localhost:4000/workflow/2022/07/31/tensorflow-cuda-wsl.html">&lt;p&gt;Getting &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tensorflow&lt;/code&gt;&lt;/strong&gt; to work properly on WSL with GPU support can be a little difficult. One needs to use the right dependencies for the a particular version of tensorflow.&lt;sup id=&quot;fnref:venv&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:venv&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; The dependencies are listed &lt;a href=&quot;https://www.tensorflow.org/install/pip&quot;&gt;here&lt;/a&gt; for the latest version. For older versions, it is listed &lt;a href=&quot;https://www.tensorflow.org/install/source#tested_build_configurations&quot;&gt;here instead&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My hardware configuration looks like this:&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CPU: AMD Ryzen 5800H (8, 16)
GPU: NVIDIA GeForce RTX 3050Ti (Laptop)
RAM: 16 GB (8 GB allowed on WSL2)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Software:&lt;/p&gt;
&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Ubuntu 22.04 LTS on WSL2
NVIDIA Graphics Driver (Game-ready) 516.59
CUDA toolkit 11.2 (11.7 supported)
cuDNN 8.1.1
Python 3.10.4
pip 22.2.1
tensorflow 2.9.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Most of this is inspired from &lt;a href=&quot;https://medium.com/@xizengmao/install-tensorflow-with-gpu-acceleration-simultaneously-for-windows-and-wsl-linux-2-10da088d5e4f&quot;&gt;this guide&lt;/a&gt;. However, parts of it didn’t work for me and I had to tweak.&lt;/p&gt;

&lt;p&gt;We start with installing the cuda toolkit. In our case, we have to choose version 11.2 (the latest is 11.7), so we must dive into the NVIDIA &lt;a href=&quot;https://developer.nvidia.com/cuda-toolkit-archive&quot;&gt;archives&lt;/a&gt; and choose the right version. Then we select &lt;strong&gt;Linux -&amp;gt; x86_64 -&amp;gt; WSL-Ubuntu -&amp;gt; 2.0 -&amp;gt; deb (local)&lt;/strong&gt;. I use the local &lt;strong&gt;deb&lt;/strong&gt; installer, however, this is upto the user.&lt;/p&gt;

&lt;p&gt;At this point, if any other versions of cuda are installed, we can uninstall them with&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nt&quot;&gt;--purge&lt;/span&gt; remove cuda
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt autoremove
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will work only if cuda was installed with apt. Otherwise, one can follow the instructions in this &lt;a href=&quot;https://stackoverflow.com/questions/56431461/how-to-remove-cuda-completely-from-ubuntu&quot;&gt;stackoverflow thread&lt;/a&gt;. To remove references to the cuda repo (since the reference might be version-specific), we have two options:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Edit &lt;em&gt;/etc/apt/sources.list&lt;/em&gt; if it contains references to the NVIDIA cuda repo.&lt;/li&gt;
  &lt;li&gt;Delete the key in &lt;em&gt;/etc/apt/sources.list.d&lt;/em&gt; that refers to the same.
We also delete the old apt key:
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key del 7fa2af80
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we can proceed with the installation.&lt;sup id=&quot;fnref:drivernote&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:drivernote&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; (The following is from the installation instructions for v11.2.0. The full guide for installing CUDA on WSL is &lt;a href=&quot;https://docs.nvidia.com/cuda/wsl-user-guide/index.html&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin
&lt;span class=&quot;nb&quot;&gt;sudo mv &lt;/span&gt;cuda-wsl-ubuntu.pin /etc/apt/preferences.d/cuda-repository-pin-600
wget https://developer.download.nvidia.com/compute/cuda/11.2.0/local_installers/cuda-repo-wsl-ubuntu-11-2-local_11.2.0-1_amd64.deb
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;dpkg &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; cuda-repo-wsl-ubuntu-11-2-local_11.2.0-1_amd64.deb
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add /var/cuda-repo-wsl-ubuntu-11-2-local/7fa2af80.pub
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;cuda
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Get a coffee - this might take time!&lt;/p&gt;

&lt;p&gt;Meanwhile, we can edit our rc file (.bashrc or .zshrc or whatever is relevant) and add the following lines:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/cuda/bin:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/usr/local/cuda/lib64:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LD_LIBRARY_PATH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally, we &lt;em&gt;source the rc file&lt;/em&gt; to load the changes.&lt;/p&gt;

&lt;p&gt;Now we install cuDNN. Installation instructions are &lt;a href=&quot;https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html&quot;&gt;here&lt;/a&gt;. We just get the library files of cuDNN and copy them to the appropriate location. We do not use an installer.
First, we install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zlib1g&lt;/code&gt;, a compression library required by cuDNN (in my case, it was already installed):&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;zlib1g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we have to sign up for the NVIDIA Developer Program first. Once we’re done and are signed in, we can proceed to downloading cuDNN. We go the &lt;a href=&quot;https://developer.nvidia.com/rdp/cudnn-archive&quot;&gt;cuDNN archive&lt;/a&gt; and choose the appropriate version (v8.1.1 - the most recent version is listed &lt;a href=&quot;https://developer.nvidia.com/rdp/cudnn-download&quot;&gt;here instead&lt;/a&gt;). We choose the “cuDNN Library for Linux (x86_64)” option, which downloads a tar file. We move this tar file to our WSL distro (for quicker file ops) and extract this using&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xvf &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where &lt;em&gt;&amp;lt;filename&amp;gt;&lt;/em&gt; should start with &lt;em&gt;cudnn-x.y-&lt;/em&gt; where &lt;em&gt;x.y&lt;/em&gt; is the cuda version.&lt;/p&gt;

&lt;p&gt;From the folder in which files were extracted, we copy these files like so:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; &amp;lt;extracted-folder-name&amp;gt;/include/cudnn&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.h /usr/local/cuda/include 
&lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; &amp;lt;extracted-folder-name&amp;gt;/lib/libcudnn&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /usr/local/cuda/lib64 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and change the permissions of these files to allow all users to read them:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo chmod &lt;/span&gt;a+r /usr/local/cuda/include/cudnn&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.h /usr/local/cuda/lib64/libcudnn&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally, we install tensorflow:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tensorflow
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This will also, likely, take time. After that, we’re done with the installation!&lt;/p&gt;

&lt;p&gt;Now we can run this in a python shell to verify our&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list_physical_devices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'GPU'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If this shows a non-empty list, tensorflow recognizes the gpu and the necessary libraries.&lt;sup id=&quot;fnref:numawarn&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:numawarn&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; Typically, this output will look something like&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PhysicalDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/physical_device:GPU:0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device_type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'GPU'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:venv&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;This naturally calls for the use of a virtual environment specifically for development involving &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tensorflow&lt;/code&gt; but we will be skipping this adventure here. This is traditionally done with &lt;strong&gt;conda&lt;/strong&gt; - as most of the guides recommend. However, &lt;a href=&quot;https://stackoverflow.com/a/71058493/12983399&quot;&gt;issues&lt;/a&gt; have been reported on WSL using this method. We can use a typical virtual environment (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;virtualenv&lt;/code&gt;) instead. &lt;a href=&quot;#fnref:venv&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:drivernote&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The display driver must be installed on &lt;strong&gt;Windows&lt;/strong&gt;. No separate installation of a graphics drivers is required on WSL. Standard cuda toolkits for Linux include the driver - so we cannot choose those versions. &lt;a href=&quot;#fnref:drivernote&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:numawarn&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;If a warning is given by tensorflow about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Your kernel may have been built without NUMA support.&lt;/code&gt;: this is probably nothing to worry about, as discussed in &lt;a href=&quot;https://forums.developer.nvidia.com/t/numa-error-running-tensorflow-on-jetson-tx2/56119/4&quot;&gt;this thread&lt;/a&gt;. &lt;a href=&quot;#fnref:numawarn&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="workflow" /><category term="tensorflow" /><category term="cuda" /><category term="wsl" /><category term="gpu" /><summary type="html">Getting tensorflow to work properly on WSL with GPU support can be a little difficult. One needs to use the right dependencies for the a particular version of tensorflow.1 The dependencies are listed here for the latest version. For older versions, it is listed here instead. My hardware configuration looks like this: CPU: AMD Ryzen 5800H (8, 16) GPU: NVIDIA GeForce RTX 3050Ti (Laptop) RAM: 16 GB (8 GB allowed on WSL2) Software: Ubuntu 22.04 LTS on WSL2 NVIDIA Graphics Driver (Game-ready) 516.59 CUDA toolkit 11.2 (11.7 supported) cuDNN 8.1.1 Python 3.10.4 pip 22.2.1 tensorflow 2.9.1 Most of this is inspired from this guide. However, parts of it didn’t work for me and I had to tweak. We start with installing the cuda toolkit. In our case, we have to choose version 11.2 (the latest is 11.7), so we must dive into the NVIDIA archives and choose the right version. Then we select Linux -&amp;gt; x86_64 -&amp;gt; WSL-Ubuntu -&amp;gt; 2.0 -&amp;gt; deb (local). I use the local deb installer, however, this is upto the user. At this point, if any other versions of cuda are installed, we can uninstall them with sudo apt --purge remove cuda sudo apt autoremove This will work only if cuda was installed with apt. Otherwise, one can follow the instructions in this stackoverflow thread. To remove references to the cuda repo (since the reference might be version-specific), we have two options: Edit /etc/apt/sources.list if it contains references to the NVIDIA cuda repo. Delete the key in /etc/apt/sources.list.d that refers to the same. We also delete the old apt key: sudo apt-key del 7fa2af80 Now we can proceed with the installation.2 (The following is from the installation instructions for v11.2.0. The full guide for installing CUDA on WSL is here): wget https://developer.download.nvidia.com/compute/cuda/repos/wsl-ubuntu/x86_64/cuda-wsl-ubuntu.pin sudo mv cuda-wsl-ubuntu.pin /etc/apt/preferences.d/cuda-repository-pin-600 wget https://developer.download.nvidia.com/compute/cuda/11.2.0/local_installers/cuda-repo-wsl-ubuntu-11-2-local_11.2.0-1_amd64.deb sudo dpkg -i cuda-repo-wsl-ubuntu-11-2-local_11.2.0-1_amd64.deb sudo apt-key add /var/cuda-repo-wsl-ubuntu-11-2-local/7fa2af80.pub sudo apt-get update sudo apt-get -y install cuda Get a coffee - this might take time! Meanwhile, we can edit our rc file (.bashrc or .zshrc or whatever is relevant) and add the following lines: export PATH=&quot;/usr/local/cuda/bin:$PATH&quot; export LD_LIBRARY_PATH=&quot;/usr/local/cuda/lib64:$LD_LIBRARY_PATH&quot; Finally, we source the rc file to load the changes. Now we install cuDNN. Installation instructions are here. We just get the library files of cuDNN and copy them to the appropriate location. We do not use an installer. First, we install zlib1g, a compression library required by cuDNN (in my case, it was already installed): sudo apt install zlib1g Now we have to sign up for the NVIDIA Developer Program first. Once we’re done and are signed in, we can proceed to downloading cuDNN. We go the cuDNN archive and choose the appropriate version (v8.1.1 - the most recent version is listed here instead). We choose the “cuDNN Library for Linux (x86_64)” option, which downloads a tar file. We move this tar file to our WSL distro (for quicker file ops) and extract this using tar xvf &amp;lt;filename&amp;gt; where &amp;lt;filename&amp;gt; should start with cudnn-x.y- where x.y is the cuda version. From the folder in which files were extracted, we copy these files like so: sudo cp &amp;lt;extracted-folder-name&amp;gt;/include/cudnn*.h /usr/local/cuda/include sudo cp -P &amp;lt;extracted-folder-name&amp;gt;/lib/libcudnn* /usr/local/cuda/lib64 and change the permissions of these files to allow all users to read them: sudo chmod a+r /usr/local/cuda/include/cudnn*.h /usr/local/cuda/lib64/libcudnn* Finally, we install tensorflow: pip install tensorflow This will also, likely, take time. After that, we’re done with the installation! Now we can run this in a python shell to verify our import tensorflow as tf print(tf.config.list_physical_devices('GPU')) If this shows a non-empty list, tensorflow recognizes the gpu and the necessary libraries.3 Typically, this output will look something like [PhysicalDevice(name='/physical_device:GPU:0', device_type='GPU')] This naturally calls for the use of a virtual environment specifically for development involving tensorflow but we will be skipping this adventure here. This is traditionally done with conda - as most of the guides recommend. However, issues have been reported on WSL using this method. We can use a typical virtual environment (virtualenv) instead. &amp;#8617; The display driver must be installed on Windows. No separate installation of a graphics drivers is required on WSL. Standard cuda toolkits for Linux include the driver - so we cannot choose those versions. &amp;#8617; If a warning is given by tensorflow about Your kernel may have been built without NUMA support.: this is probably nothing to worry about, as discussed in this thread. &amp;#8617;</summary></entry><entry><title type="html">Python virtual environments with pyenv</title><link href="http://localhost:4000/workflow/2022/03/26/pyenv-virtualenv.html" rel="alternate" type="text/html" title="Python virtual environments with pyenv" /><published>2022-03-26T17:55:00+05:30</published><updated>2022-03-26T17:55:00+05:30</updated><id>http://localhost:4000/workflow/2022/03/26/pyenv-virtualenv</id><content type="html" xml:base="http://localhost:4000/workflow/2022/03/26/pyenv-virtualenv.html">&lt;p&gt;Virtual environments isolate a set of executables, libraries and related files from another such set. From the &lt;strong&gt;python&lt;/strong&gt; &lt;a href=&quot;https://docs.python.org/3/library/venv.html&quot;&gt;docs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;A virtual environment is a Python environment such that the Python interpreter, libraries and scripts installed into it are isolated from those installed in other virtual environments, and (by default) any libraries installed in a “system” Python, i.e., one which is installed as part of your operating system.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are many options to do this: &lt;strong&gt;venv&lt;/strong&gt; (comes installed by default with Python 3.3+), &lt;strong&gt;virtualenv&lt;/strong&gt;, &lt;strong&gt;conda&lt;/strong&gt;, &lt;strong&gt;poetry&lt;/strong&gt; and so on… For people like us who use these languages mostly for scientific work, &lt;strong&gt;conda&lt;/strong&gt; is a great option (and for other applications too - it handles dependency management well and has its own package manager &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda&lt;/code&gt;), but it irks me to great measure because to install conda you’d have to install a &lt;strong&gt;python&lt;/strong&gt; version (the &lt;em&gt;base&lt;/em&gt; version of conda) again (?!) and the install size, even for &lt;a href=&quot;https://docs.conda.io/en/latest/miniconda.html&quot;&gt;&lt;strong&gt;miniconda&lt;/strong&gt;&lt;/a&gt;, is ~400MB. It is however a good option if that’s the &lt;em&gt;first python installation one starts with&lt;/em&gt; - I happened to have a working python installation (v3.9.7 on Ubuntu 21.10 on WSL) with many packages and I was unwilling to get rid of it and consequently break many applications.&lt;/p&gt;

&lt;p&gt;Also, many applications demand a different python version altogether. If one does not use &lt;strong&gt;conda&lt;/strong&gt;, separate python versions must be installed which can also break functionality if the path to the appropriate executable is not set in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; and scripts do not properly select the right version. So this demands proper management. This is what we achieve with &lt;a href=&quot;https://github.com/pyenv/pyenv&quot;&gt;&lt;strong&gt;pyenv&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;pyenv&lt;/strong&gt; helps manage various python installations on the system easily and also provides the plugin &lt;a href=&quot;https://github.com/pyenv/pyenv-virtualenv&quot;&gt;&lt;strong&gt;pyenv-virtualenv&lt;/strong&gt;&lt;/a&gt; (installed separately, based on &lt;strong&gt;venv&lt;/strong&gt;/&lt;strong&gt;virtualenv&lt;/strong&gt;: &lt;a href=&quot;https://github.com/pyenv/pyenv-virtualenv#virtualenv-and-venv&quot;&gt;more on this&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

&lt;p&gt;To start with, we configure a &lt;a href=&quot;https://github.com/pyenv/pyenv/wiki#suggested-build-environment&quot;&gt;proper build environment&lt;/a&gt; for building Python distributions with &lt;strong&gt;pyenv&lt;/strong&gt; on-the-fly:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;make build-essential libssl-dev zlib1g-dev &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Some of these packages would probably already be installed, but be prepared to install a bulk of packages. For me the download size was ~100MB and installation size ~500MB. &lt;sup id=&quot;fnref:sizeissue&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:sizeissue&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Once this is done, we install &lt;strong&gt;pyenv&lt;/strong&gt; via a Github checkout (of course, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; needs to be installed). To do so, we first clone the repo:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; git clone https://github.com/pyenv/pyenv.git ~/.pyenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where the location has been set as &lt;em&gt;~/.pyenv/&lt;/em&gt;. This can be changed. Next, we optionally &lt;em&gt;try&lt;/em&gt; to compile a &lt;em&gt;dynamic Bash extension&lt;/em&gt; (without this step, &lt;strong&gt;pyenv&lt;/strong&gt; works just fine, this should just speed up &lt;strong&gt;pyenv&lt;/strong&gt;):&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.pyenv &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; src/configure &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; src
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Next, we configure the shell’s environment to work with &lt;strong&gt;pyenv&lt;/strong&gt;. For bash on Ubuntu with a &lt;em&gt;.profile&lt;/em&gt; file that sources &lt;em&gt;.bashrc&lt;/em&gt;,&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Ei&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/^([^#]|$)/ {a \
export PYENV_ROOT=&quot;$HOME/.pyenv&quot;
a \
export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;
a \
'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;':a'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'$!{n;ba};}'&lt;/span&gt; ~/.profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This puts the two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;export&lt;/code&gt; lines at the beginning (which is why we do all the gymnastics with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sed&lt;/code&gt;) of &lt;em&gt;.profile&lt;/em&gt; to&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create the variable &lt;em&gt;$PYENV_ROOT&lt;/em&gt; which stores the path to the folder we cloned the repo to, and&lt;/li&gt;
  &lt;li&gt;Add this variable to (the beginning of) &lt;em&gt;$PATH&lt;/em&gt;.
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'eval &quot;$(pyenv init --path)&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;~/.profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;This puts the pyenv &lt;em&gt;shims&lt;/em&gt; into &lt;em&gt;$PATH&lt;/em&gt;. The &lt;em&gt;shims&lt;/em&gt; redirect calls to the python executable to the right one. Details on the working &lt;a href=&quot;https://github.com/pyenv/pyenv#how-it-works&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'eval &quot;$(pyenv init -)&quot;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;and this modifies &lt;em&gt;.bashrc&lt;/em&gt;. For other setups, see &lt;a href=&quot;https://github.com/pyenv/pyenv#basic-github-checkout&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, we restart the shell - and we’re done installing pyenv!&lt;/p&gt;

&lt;p&gt;Next, we install &lt;strong&gt;pyenv-virtualenv&lt;/strong&gt;. This simply requires checking out the repo to the &lt;em&gt;.pyenv/plugins/&lt;/em&gt; directory:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/pyenv/pyenv-virtualenv.git &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;pyenv root&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;/plugins/pyenv-virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and we then run&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &amp;lt;shell&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(in our case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;shell&amp;gt;&lt;/code&gt; is just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bash&lt;/code&gt;) to restart the shell.&lt;/p&gt;

&lt;p&gt;If installed with this method, upgrading is super simple - we just go the &lt;em&gt;.pyenv&lt;/em&gt; directory and pull from the repo.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;pyenv root&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
git pull
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and a similar procedure follows for &lt;strong&gt;pyenv-virtualenv&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;usage&quot;&gt;Usage&lt;/h3&gt;

&lt;p&gt;When using &lt;strong&gt;pyenv&lt;/strong&gt;, we have a &lt;em&gt;system&lt;/em&gt; version of python that is present by default (python was installed by default, of course). We can install more versions by running&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pyenv &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &amp;lt;version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where we &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;version&amp;gt;&lt;/code&gt; may be replaced by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.8.1&lt;/code&gt;, for instance. We can list all available versions by typing&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pyenv &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--list&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and choose the appropriate one. After installation, this goes under &lt;em&gt;.pyenv/versions/{version}/&lt;/em&gt; and all packages/virtual-environments concerning this version go under this directory. We can list the currently installed versions by&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pyenv versions
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The currently active version is marked by an asterisk (*). This can also be checked by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyenv version&lt;/code&gt; instead. The output of the command will depend upon the current session or the current location. This is how &lt;strong&gt;pyenv&lt;/strong&gt; chooses the python version (from the docs):&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;
      &lt;p&gt;The &lt;em&gt;PYENV_VERSION&lt;/em&gt; environment variable (if specified). You can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyenv shell&lt;/code&gt; command to set this environment variable in your current shell session.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;The application-specific &lt;em&gt;.python-version&lt;/em&gt; file in the current directory (if present). You can modify the current directory’s &lt;em&gt;.python-version&lt;/em&gt; file with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyenv local&lt;/code&gt; command.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;The first &lt;em&gt;.python-version&lt;/em&gt; file found (if any) by searching each parent directory, until reaching the root of your filesystem.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;The global &lt;em&gt;$(pyenv root)/version&lt;/em&gt; file. You can modify this file using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyenv global&lt;/code&gt; command. If the global version file is not present, pyenv assumes you want to use the &lt;em&gt;system&lt;/em&gt; Python. (In other words, whatever version would run if pyenv weren’t in your &lt;em&gt;PATH&lt;/em&gt;.)&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, there are two ways to specify a python version to use:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Change the version being used for the current session by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyenv shell &amp;lt;version&amp;gt;&lt;/code&gt;. Running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyenv shell&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyenv version&lt;/code&gt; would now show &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;version&amp;gt;&lt;/code&gt; as output. For this session, until changed, this version will be used for running python scripts. We can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyenv shell --unset&lt;/code&gt; to revert to the shell being originally used before any such commands were executed. &lt;em&gt;This choice has the higest precedence.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Create a &lt;em&gt;.python-version&lt;/em&gt; file by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyenv local &amp;lt;version&amp;gt;&lt;/code&gt; in a project directory. Whenever scripts are run from this directory, or &lt;em&gt;any&lt;/em&gt; subdirectories, the chosen version will always be used, considering no shell version has been configured for the session. One can set multiple versions in decreasing order of precedence by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyenv local &amp;lt;version-1&amp;gt; &amp;lt;version-2&amp;gt; ...&lt;/code&gt;  in a directory. Again, running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyenv local&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyenv version&lt;/code&gt; would now show the active versions as output. To unset this file/config, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyenv local --unset&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To uninstall a python version, we can either run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyenv uninstall &amp;lt;version&amp;gt;&lt;/code&gt; or remove the entire &lt;em&gt;{version}/&lt;/em&gt; directory in &lt;em&gt;.pyenv/versions/&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;To create virtual environments (our original concern!), we run the command&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pyenv virtualenv &amp;lt;version&amp;gt; &amp;lt;env-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;i.e. we select a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;version&amp;gt;&lt;/code&gt; and specify the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;env-name&amp;gt;&lt;/code&gt; of the virtual environment we want to create. We can omit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;version&amp;gt;&lt;/code&gt;: in that case, the version currently set will be used to create the virtual environment, as determined by our configuration. The packages installed under this environment will be listed under the directory &lt;em&gt;.pyenv/versions/{version}/envs/{env-name}&lt;/em&gt;. To activate this environment, we run&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pyenv activate &amp;lt;env-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyenv deactivate&lt;/code&gt; to - well, deactivate the environment. To list created virtual environments, we run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyenv virtualenvs&lt;/code&gt;. It is possible to specify a virtual environment in a local &lt;em&gt;.python-version&lt;/em&gt; file by running&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pyenv &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; &amp;lt;env-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As mentioned before, we can list multiple python versions, environments etc. separated by spaces.&lt;/p&gt;

&lt;p&gt;To remove an environment altogether, we can run&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pyenv virtualenv-delete &amp;lt;env-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or just delete the &lt;em&gt;{env-name}&lt;/em&gt; directory in &lt;em&gt;.pyenv/versions/{version}/envs/&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After activating, we might want to install necessary packages. One could do this using a &lt;em&gt;requirements&lt;/em&gt; text file which lists specific versions of packages (perhaps a natural use-case in virtual environments), passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; requirements.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;It could be helpful to use a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--no-cache-dir&lt;/code&gt; option if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; uses cached versions which do not match the required version.&lt;sup id=&quot;fnref:cache&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:cache&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&quot;installing-ipython-kernel&quot;&gt;Installing ipython kernel&lt;/h3&gt;

&lt;p&gt;Finally, we could install an &lt;strong&gt;ipython kernel&lt;/strong&gt; for a virtual environment, if we use &lt;strong&gt;jupyter notebook&lt;/strong&gt; installed for the &lt;em&gt;system&lt;/em&gt; version. Installing multiple jupyter instances may in general not make sense (?). So we run&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pyenv activate &amp;lt;env-name&amp;gt;
pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ipykernel ipython_genutils
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Depending upon the project and/or the python version, a specific version of ipykernel might be required. By installing &lt;strong&gt;ipython_genutils&lt;/strong&gt; for the environment we can get away without installing &lt;strong&gt;ipython&lt;/strong&gt; itself, since it will be installed for the &lt;em&gt;system&lt;/em&gt; version.&lt;/p&gt;

&lt;p&gt;After the installation, we may run&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; ipykernel &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;env-kernel-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where we type in a name for this kernel. It need not be identical to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;env-name&amp;gt;&lt;/code&gt;. Now when we fire Jupyter Lab/notebook, this kernel should be available. We wouldn’t need to activate the virtual environment for this purpose.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:sizeissue&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Of course, one can ask here if this defeats the purpose of &lt;em&gt;not&lt;/em&gt; installing &lt;strong&gt;conda&lt;/strong&gt; - but it is probably not necessary to install all of these. It is &lt;em&gt;suggested&lt;/em&gt; by the devs - the question of potential failure would probably need to be answered on a case-by-case basis. In any case, this step can probably be optimized. &lt;em&gt;TO BE INVESTIGATED&lt;/em&gt; &lt;a href=&quot;#fnref:sizeissue&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:cache&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;This may likely happen when the unlisted dependencies of the packages listed are installed from cache. However, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--no-cache-dir&lt;/code&gt; might significantly increase install times. Some details &lt;a href=&quot;https://stackoverflow.com/questions/9510474/pip-uses-incorrect-cached-package-version-instead-of-the-user-specified-version/61762308#61762308&quot;&gt;here&lt;/a&gt;. &lt;a href=&quot;#fnref:cache&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="workflow" /><category term="python" /><category term="pyenv" /><summary type="html">Virtual environments isolate a set of executables, libraries and related files from another such set. From the python docs: A virtual environment is a Python environment such that the Python interpreter, libraries and scripts installed into it are isolated from those installed in other virtual environments, and (by default) any libraries installed in a “system” Python, i.e., one which is installed as part of your operating system. There are many options to do this: venv (comes installed by default with Python 3.3+), virtualenv, conda, poetry and so on… For people like us who use these languages mostly for scientific work, conda is a great option (and for other applications too - it handles dependency management well and has its own package manager conda), but it irks me to great measure because to install conda you’d have to install a python version (the base version of conda) again (?!) and the install size, even for miniconda, is ~400MB. It is however a good option if that’s the first python installation one starts with - I happened to have a working python installation (v3.9.7 on Ubuntu 21.10 on WSL) with many packages and I was unwilling to get rid of it and consequently break many applications. Also, many applications demand a different python version altogether. If one does not use conda, separate python versions must be installed which can also break functionality if the path to the appropriate executable is not set in PATH and scripts do not properly select the right version. So this demands proper management. This is what we achieve with pyenv. pyenv helps manage various python installations on the system easily and also provides the plugin pyenv-virtualenv (installed separately, based on venv/virtualenv: more on this). Installation To start with, we configure a proper build environment for building Python distributions with pyenv on-the-fly: sudo apt-get update; \ sudo apt-get install make build-essential libssl-dev zlib1g-dev \ libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm \ libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev Some of these packages would probably already be installed, but be prepared to install a bulk of packages. For me the download size was ~100MB and installation size ~500MB. 1 Once this is done, we install pyenv via a Github checkout (of course, git needs to be installed). To do so, we first clone the repo: git clone https://github.com/pyenv/pyenv.git ~/.pyenv where the location has been set as ~/.pyenv/. This can be changed. Next, we optionally try to compile a dynamic Bash extension (without this step, pyenv works just fine, this should just speed up pyenv): cd ~/.pyenv &amp;amp;&amp;amp; src/configure &amp;amp;&amp;amp; make -C src Next, we configure the shell’s environment to work with pyenv. For bash on Ubuntu with a .profile file that sources .bashrc, sed -Ei -e '/^([^#]|$)/ {a \ export PYENV_ROOT=&quot;$HOME/.pyenv&quot; a \ export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot; a \ ' -e ':a' -e '$!{n;ba};}' ~/.profile This puts the two export lines at the beginning (which is why we do all the gymnastics with sed) of .profile to Create the variable $PYENV_ROOT which stores the path to the folder we cloned the repo to, and Add this variable to (the beginning of) $PATH. echo 'eval &quot;$(pyenv init --path)&quot;' &amp;gt;&amp;gt;~/.profile This puts the pyenv shims into $PATH. The shims redirect calls to the python executable to the right one. Details on the working here. echo 'eval &quot;$(pyenv init -)&quot;' &amp;gt;&amp;gt; ~/.bashrc and this modifies .bashrc. For other setups, see here. Finally, we restart the shell - and we’re done installing pyenv! Next, we install pyenv-virtualenv. This simply requires checking out the repo to the .pyenv/plugins/ directory: git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv and we then run exec &amp;lt;shell&amp;gt; (in our case, &amp;lt;shell&amp;gt; is just bash) to restart the shell. If installed with this method, upgrading is super simple - we just go the .pyenv directory and pull from the repo. cd $(pyenv root) git pull and a similar procedure follows for pyenv-virtualenv. Usage When using pyenv, we have a system version of python that is present by default (python was installed by default, of course). We can install more versions by running pyenv install &amp;lt;version&amp;gt; where we &amp;lt;version&amp;gt; may be replaced by 3.8.1, for instance. We can list all available versions by typing pyenv install --list and choose the appropriate one. After installation, this goes under .pyenv/versions/{version}/ and all packages/virtual-environments concerning this version go under this directory. We can list the currently installed versions by pyenv versions The currently active version is marked by an asterisk (*). This can also be checked by running pyenv version instead. The output of the command will depend upon the current session or the current location. This is how pyenv chooses the python version (from the docs): The PYENV_VERSION environment variable (if specified). You can use the pyenv shell command to set this environment variable in your current shell session. The application-specific .python-version file in the current directory (if present). You can modify the current directory’s .python-version file with the pyenv local command. The first .python-version file found (if any) by searching each parent directory, until reaching the root of your filesystem. The global $(pyenv root)/version file. You can modify this file using the pyenv global command. If the global version file is not present, pyenv assumes you want to use the system Python. (In other words, whatever version would run if pyenv weren’t in your PATH.) In other words, there are two ways to specify a python version to use: Change the version being used for the current session by running pyenv shell &amp;lt;version&amp;gt;. Running pyenv shell or pyenv version would now show &amp;lt;version&amp;gt; as output. For this session, until changed, this version will be used for running python scripts. We can run pyenv shell --unset to revert to the shell being originally used before any such commands were executed. This choice has the higest precedence. Create a .python-version file by running pyenv local &amp;lt;version&amp;gt; in a project directory. Whenever scripts are run from this directory, or any subdirectories, the chosen version will always be used, considering no shell version has been configured for the session. One can set multiple versions in decreasing order of precedence by running pyenv local &amp;lt;version-1&amp;gt; &amp;lt;version-2&amp;gt; ... in a directory. Again, running pyenv local or pyenv version would now show the active versions as output. To unset this file/config, run pyenv local --unset. To uninstall a python version, we can either run pyenv uninstall &amp;lt;version&amp;gt; or remove the entire {version}/ directory in .pyenv/versions/. To create virtual environments (our original concern!), we run the command pyenv virtualenv &amp;lt;version&amp;gt; &amp;lt;env-name&amp;gt; i.e. we select a &amp;lt;version&amp;gt; and specify the name &amp;lt;env-name&amp;gt; of the virtual environment we want to create. We can omit &amp;lt;version&amp;gt;: in that case, the version currently set will be used to create the virtual environment, as determined by our configuration. The packages installed under this environment will be listed under the directory .pyenv/versions/{version}/envs/{env-name}. To activate this environment, we run pyenv activate &amp;lt;env-name&amp;gt; and pyenv deactivate to - well, deactivate the environment. To list created virtual environments, we run pyenv virtualenvs. It is possible to specify a virtual environment in a local .python-version file by running pyenv local &amp;lt;env-name&amp;gt; As mentioned before, we can list multiple python versions, environments etc. separated by spaces. To remove an environment altogether, we can run pyenv virtualenv-delete &amp;lt;env-name&amp;gt; or just delete the {env-name} directory in .pyenv/versions/{version}/envs/. After activating, we might want to install necessary packages. One could do this using a requirements text file which lists specific versions of packages (perhaps a natural use-case in virtual environments), passed to pip: pip install -r requirements.txt It could be helpful to use a --no-cache-dir option if pip uses cached versions which do not match the required version.2 Installing ipython kernel Finally, we could install an ipython kernel for a virtual environment, if we use jupyter notebook installed for the system version. Installing multiple jupyter instances may in general not make sense (?). So we run pyenv activate &amp;lt;env-name&amp;gt; pip install ipykernel ipython_genutils Note: Depending upon the project and/or the python version, a specific version of ipykernel might be required. By installing ipython_genutils for the environment we can get away without installing ipython itself, since it will be installed for the system version. After the installation, we may run python -m ipykernel install --user --name=&amp;lt;env-kernel-name&amp;gt; where we type in a name for this kernel. It need not be identical to &amp;lt;env-name&amp;gt;. Now when we fire Jupyter Lab/notebook, this kernel should be available. We wouldn’t need to activate the virtual environment for this purpose. Of course, one can ask here if this defeats the purpose of not installing conda - but it is probably not necessary to install all of these. It is suggested by the devs - the question of potential failure would probably need to be answered on a case-by-case basis. In any case, this step can probably be optimized. TO BE INVESTIGATED &amp;#8617; This may likely happen when the unlisted dependencies of the packages listed are installed from cache. However, using --no-cache-dir might significantly increase install times. Some details here. &amp;#8617;</summary></entry><entry><title type="html">Managing WSL distros with LxRunOffline</title><link href="http://localhost:4000/tweaks/2022/03/20/wsl-with-lxrunoffline.html" rel="alternate" type="text/html" title="Managing WSL distros with LxRunOffline" /><published>2022-03-20T12:00:00+05:30</published><updated>2022-03-20T12:00:00+05:30</updated><id>http://localhost:4000/tweaks/2022/03/20/wsl-with-lxrunoffline</id><content type="html" xml:base="http://localhost:4000/tweaks/2022/03/20/wsl-with-lxrunoffline.html">&lt;p&gt;&lt;strong&gt;LxRunOffline&lt;/strong&gt; is a tool for managing WSL distributions.&lt;/p&gt;

&lt;p&gt;Can be installed using &lt;strong&gt;chocolatey&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;choco&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;install&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lxrunoffline&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;installing-distros&quot;&gt;Installing distros&lt;/h3&gt;

&lt;p&gt;Detailed information in the &lt;a href=&quot;https://github.com/DDoSolitary/LxRunOffline/wiki&quot;&gt;github repo wiki&lt;/a&gt;. Installation of a distro can be done as follows:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;LxRunOffline&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;custom-distro-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install-location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name-of-tar-file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where the tar file has been downloaded from &lt;a href=&quot;https://lxrunoffline.apphb.com/download/{distro}/{version}&quot;&gt;https://lxrunoffline.apphb.com/download/{distro}/{version}&lt;/a&gt; for the required distribution &lt;em&gt;or&lt;/em&gt; is a previously exported distro (using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wsl --export&lt;/code&gt; or LxRunOffline itself).&lt;/p&gt;

&lt;p&gt;The installed distros can be viewed with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LxRunOffline l&lt;/code&gt;. For detailed summary of an installed distro:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;LxRunOffline&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sm&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;custom-distro-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Unfortunately, &lt;strong&gt;LxRunOffline&lt;/strong&gt; installs distros using WSL1. If one has to upgrade to WSL2, one must run&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;wsl&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--set-version&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;custom-distro-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This conversion, however, may fail, or take an insanely long time depending on the size of the distro and other &lt;em&gt;undocumented&lt;/em&gt; reasons (?) as detailed in &lt;a href=&quot;https://github.com/microsoft/WSL/issues/5344&quot;&gt;github:microsoft/WSL:issue#5344&lt;/a&gt; or &lt;a href=&quot;https://github.com/microsoft/WSL/issues/4626&quot;&gt;github:microsoft/WSL:issue#4626&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a fresh install this should work. (?) Of course, there is a lot of guessing here as I don’t know the exact reasons. For me, importing an old distribution with &lt;strong&gt;wsl&lt;/strong&gt; failed - and after installing it with &lt;strong&gt;LxRunOffline&lt;/strong&gt;, &lt;strong&gt;wsl&lt;/strong&gt; still failed to convert it to version 2, stating&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Conversion in progress, this may take a few minutes.
Importing the distribution failed.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;after some time. &lt;span style=&quot;color:red&quot;&gt;&lt;em&gt;TO BE INVESTIGATED.&lt;/em&gt;&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&quot;setting-the-user&quot;&gt;Setting the user&lt;/h3&gt;

&lt;p&gt;If installed this way, the distro will probably default to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; user. To avoid this, we can create a new user from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt;. First, we list the available users. This is stored in &lt;em&gt;/etc/passwd&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;or to just get the usernames and the user ids:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'{print $1,$3}'&lt;/span&gt; /etc/passwd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where we specify the separator &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt; using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-F&lt;/code&gt; and print only the first entry &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$1&lt;/code&gt; (which is the username) from the file. As we can see from the first output, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; user has id 0. The default login user usually has id 1000. There are many users with non-login shells as well, not of interest.&lt;/p&gt;

&lt;p&gt;Now to create an user:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;adduser &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;user-name&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;after which we will be prompted to enter the password and user information. Now we can re-list the users to check the user id (this should be 1000 if there weren’t any users already).&lt;/p&gt;

&lt;p&gt;Finally, we shutdown the wsl distro and set the default user&lt;sup id=&quot;fnref:setdefuser&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:setdefuser&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;LxRunOffline&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;su&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;custom-distro-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user-id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;su&lt;/code&gt; stands for &lt;em&gt;set user&lt;/em&gt;. The next time we open the distro, we will login as this user by default.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:setdefuser&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;This is only for imported/custom-installed distros. For a distro installed using the default mode &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wsl --install&lt;/code&gt; this can be done using&lt;/p&gt;
      &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distro-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--default-user&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user-name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
      &lt;p&gt;from Powershell/cmd. &lt;a href=&quot;#fnref:setdefuser&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="tweaks" /><category term="wsl" /><category term="lxrunoffline" /><summary type="html">LxRunOffline is a tool for managing WSL distributions. Can be installed using chocolatey: choco install lxrunoffline Installing distros Detailed information in the github repo wiki. Installation of a distro can be done as follows: LxRunOffline i -n {custom-distro-name} -d {install-location} -f {name-of-tar-file} where the tar file has been downloaded from https://lxrunoffline.apphb.com/download/{distro}/{version} for the required distribution or is a previously exported distro (using wsl --export or LxRunOffline itself). The installed distros can be viewed with LxRunOffline l. For detailed summary of an installed distro: LxRunOffline sm -n {custom-distro-name} Unfortunately, LxRunOffline installs distros using WSL1. If one has to upgrade to WSL2, one must run wsl --set-version {custom-distro-name} 2 This conversion, however, may fail, or take an insanely long time depending on the size of the distro and other undocumented reasons (?) as detailed in github:microsoft/WSL:issue#5344 or github:microsoft/WSL:issue#4626. For a fresh install this should work. (?) Of course, there is a lot of guessing here as I don’t know the exact reasons. For me, importing an old distribution with wsl failed - and after installing it with LxRunOffline, wsl still failed to convert it to version 2, stating Conversion in progress, this may take a few minutes. Importing the distribution failed. after some time. TO BE INVESTIGATED. Setting the user If installed this way, the distro will probably default to the root user. To avoid this, we can create a new user from root. First, we list the available users. This is stored in /etc/passwd: $ cat /etc/passwd or to just get the usernames and the user ids: $ awk -F: '{print $1,$3}' /etc/passwd where we specify the separator : using -F and print only the first entry $1 (which is the username) from the file. As we can see from the first output, the root user has id 0. The default login user usually has id 1000. There are many users with non-login shells as well, not of interest. Now to create an user: $ adduser {user-name} after which we will be prompted to enter the password and user information. Now we can re-list the users to check the user id (this should be 1000 if there weren’t any users already). Finally, we shutdown the wsl distro and set the default user1 LxRunOffline su -n {custom-distro-name} -v {user-id} where su stands for set user. The next time we open the distro, we will login as this user by default. This is only for imported/custom-installed distros. For a distro installed using the default mode wsl --install this can be done using {distro-name} config --default-user {user-name} from Powershell/cmd. &amp;#8617;</summary></entry><entry><title type="html">Run Windows Store App from command line</title><link href="http://localhost:4000/tweaks/2022/01/13/cmdrun-winstoreapp.html" rel="alternate" type="text/html" title="Run Windows Store App from command line" /><published>2022-01-13T14:10:00+05:30</published><updated>2022-01-13T14:10:00+05:30</updated><id>http://localhost:4000/tweaks/2022/01/13/cmdrun-winstoreapp</id><content type="html" xml:base="http://localhost:4000/tweaks/2022/01/13/cmdrun-winstoreapp.html">&lt;p&gt;The procedure to launch Windows Store apps manually seems to be convoluted, as there are a host of permission issues associated with it. Windows Store apps are usually stored in the folder &lt;em&gt;C:\Program Files\WindowsApps&lt;/em&gt;. The folder is hidden and permissions are restricted. Apps within this folder cannot be run manually (atleast in my experience?).&lt;/p&gt;

&lt;p&gt;The method outlined here helps us launch such an application manually from the command line, which might be handy. We follow &lt;a href=&quot;https://www.tenforums.com/software-apps/57000-method-open-any-windows-10-apps-command-line.html&quot;&gt;this guide&lt;/a&gt; loosely.&lt;/p&gt;

&lt;p&gt;The command that achieves it has the format&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;explorer shell:appsfolder\&amp;lt;PackageFamilyName&amp;gt;!&amp;lt;ApplicationID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Time to explain!&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;shell:appsfolder&lt;/em&gt; location points to all the installed applications on the system. Indeed, if we type this out in the File Explorer address bar or in the Windows Run dialog, we’re taken to the folder.&lt;sup id=&quot;fnref:accessmethod&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:accessmethod&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Now we need to find the &lt;em&gt;PackageFamilyName&lt;/em&gt; and &lt;em&gt;ApplicationID&lt;/em&gt; of the Windows Store app of interest.&lt;/p&gt;

&lt;p&gt;To do so, we create a shortcut (on the Desktop) of the app of interest by right-clicking on it in the &lt;em&gt;shell:appsfolder&lt;/em&gt;. Once, the shortcut is created, we open its &lt;strong&gt;Properties&lt;/strong&gt; and under the &lt;strong&gt;Shortcut&lt;/strong&gt; tab, we can see the &lt;strong&gt;Target&lt;/strong&gt; field which lists exactly the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;PackageFamilyName&amp;gt;!&amp;lt;ApplicationID&amp;gt;&lt;/code&gt; format, but this being an &lt;a href=&quot;https://stackoverflow.com/a/1270833/12983399&quot;&gt;advertised shortcut&lt;/a&gt;, the field will be greyed out and since the entry is long, it might not be possible to read all of it. If one can, however - our task’s accomplished - just put it in the format and the application runs! Otherwise, read on.&lt;/p&gt;

&lt;p&gt;We run a powershell instance and run the following command:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Get-AppxPackage&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;app-name-wildcard&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;app-name-wildcard&amp;gt;&lt;/code&gt; is a wildcard string that is related to our application of interest. Basically, we use a part of the application name (which we of course, know) along with wildcard characters to find the relevent app entry using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get-AppxPackage&lt;/code&gt;. For example, this displays the entry of the &lt;strong&gt;Microsoft Photos&lt;/strong&gt; app (bundled by default):&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Get-AppxPackage&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*Photo*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;


&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;              &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Microsoft.Windows.Photos&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Publisher&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Microsoft&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Corporation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Microsoft&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Corporation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Redmond&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Washington&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;US&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Architecture&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;X64&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResourceId&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;           &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;2021.21110.8005.0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PackageFullName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Microsoft.Windows.Photos_2021.21110.8005.0_x64__8wekyb3d8bbwe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InstallLocation&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;C:\Program&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Files\WindowsApps\Microsoft.Windows.Photos_2021.21110.8005.0_x64__8wekyb3d8bbwe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsFramework&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PackageFamilyName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Microsoft.Windows.Photos_8wekyb3d8bbwe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PublisherId&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;8wekyb3d8bbwe&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsResourcePackage&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsBundle&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;          &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsDevelopmentMode&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NonRemovable&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dependencies&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Microsoft.Photos.MediaEngineDLC_1.0.0.0_x64__8wekyb3d8bbwe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Microsoft.UI.Xaml.2.6_2.62112.3002.0_x64__8wekyb3d8bbwe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Microsoft.NET.Native.Framework.2.2_2.2.29512.0_x64__8wekyb3d8bbwe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Microsoft.NET.Native.Runtime.2.2_2.2.28604.0_x64__8wekyb3d8bbwe...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsPartiallyStaged&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SignatureKind&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This method displays both the &lt;em&gt;PackageFamilyName&lt;/em&gt; (&lt;em&gt;Microsoft.Windows.Photos_8wekyb3d8bbwe&lt;/em&gt; in this case) and the location of the executable (&lt;em&gt;C:\Program Files\WindowsApps\Microsoft.Windows.Photos_2021.21110.8005.0_x64__8wekyb3d8bbwe&lt;/em&gt;). A less hit-and-miss method would be to use keywords we found in the target field of the app shortcut (preferably, the beginning of the string, which we can always see) and use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Where-Object&lt;/code&gt; cmdlet to filter results using the &lt;em&gt;PackageFamilyName&lt;/em&gt; itself&lt;sup id=&quot;fnref:shortcut&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:shortcut&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;… like so:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Get-AppxPackage&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Where-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-like&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*Photo*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;with that out of the way, we can now go to the folder containing the app and find the &lt;em&gt;AppxManifest.xml&lt;/em&gt; file there. In this file, we need to find the &lt;em&gt;ApplicationID&lt;/em&gt;.&lt;sup id=&quot;fnref:appid&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:appid&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; For &lt;strong&gt;Microsoft Photos&lt;/strong&gt;, for instance:&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Application&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;App&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Executable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Microsoft.Photos.exe&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;EntryPoint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AppStubCS.Windows.App&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ResourceGroup=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;AppGroup&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;em&gt;ApplicationID&lt;/em&gt; is just “App” in this case. So, the command to launch &lt;strong&gt;Microsoft Photos&lt;/strong&gt; from the command line then becomes:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;explorer&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;shell:appsfolder\Microsoft.Windows.Photos_8wekyb3d8bbwe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:accessmethod&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;I personally use &lt;strong&gt;Microsoft Powertoys&lt;/strong&gt; for the same - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt; shell:appsfolder&lt;/code&gt; does the trick. &lt;a href=&quot;#fnref:accessmethod&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:shortcut&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The first method, if it works reliably, then creating the shortcut or going to &lt;em&gt;shell:appsfolder&lt;/em&gt; is redundant. &lt;a href=&quot;#fnref:shortcut&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:appid&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;A simple document search should do. We should search for the &lt;em&gt;Executable=&lt;/em&gt; property of the application, as one application package may contain more than one application. &lt;a href=&quot;#fnref:appid&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="tweaks" /><category term="windows-store" /><category term="commandline" /><summary type="html">The procedure to launch Windows Store apps manually seems to be convoluted, as there are a host of permission issues associated with it. Windows Store apps are usually stored in the folder C:\Program Files\WindowsApps. The folder is hidden and permissions are restricted. Apps within this folder cannot be run manually (atleast in my experience?). The method outlined here helps us launch such an application manually from the command line, which might be handy. We follow this guide loosely. The command that achieves it has the format explorer shell:appsfolder\&amp;lt;PackageFamilyName&amp;gt;!&amp;lt;ApplicationID&amp;gt; Time to explain! The shell:appsfolder location points to all the installed applications on the system. Indeed, if we type this out in the File Explorer address bar or in the Windows Run dialog, we’re taken to the folder.1 Now we need to find the PackageFamilyName and ApplicationID of the Windows Store app of interest. To do so, we create a shortcut (on the Desktop) of the app of interest by right-clicking on it in the shell:appsfolder. Once, the shortcut is created, we open its Properties and under the Shortcut tab, we can see the Target field which lists exactly the &amp;lt;PackageFamilyName&amp;gt;!&amp;lt;ApplicationID&amp;gt; format, but this being an advertised shortcut, the field will be greyed out and since the entry is long, it might not be possible to read all of it. If one can, however - our task’s accomplished - just put it in the format and the application runs! Otherwise, read on. We run a powershell instance and run the following command: Get-AppxPackage -Name &quot;&amp;lt;app-name-wildcard&amp;gt;&quot; where &amp;lt;app-name-wildcard&amp;gt; is a wildcard string that is related to our application of interest. Basically, we use a part of the application name (which we of course, know) along with wildcard characters to find the relevent app entry using Get-AppxPackage. For example, this displays the entry of the Microsoft Photos app (bundled by default): Get-AppxPackage -Name &quot;*Photo*&quot; Name : Microsoft.Windows.Photos Publisher : CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US Architecture : X64 ResourceId : Version : 2021.21110.8005.0 PackageFullName : Microsoft.Windows.Photos_2021.21110.8005.0_x64__8wekyb3d8bbwe InstallLocation : C:\Program Files\WindowsApps\Microsoft.Windows.Photos_2021.21110.8005.0_x64__8wekyb3d8bbwe IsFramework : False PackageFamilyName : Microsoft.Windows.Photos_8wekyb3d8bbwe PublisherId : 8wekyb3d8bbwe IsResourcePackage : False IsBundle : False IsDevelopmentMode : False NonRemovable : False Dependencies : {Microsoft.Photos.MediaEngineDLC_1.0.0.0_x64__8wekyb3d8bbwe, Microsoft.UI.Xaml.2.6_2.62112.3002.0_x64__8wekyb3d8bbwe, Microsoft.NET.Native.Framework.2.2_2.2.29512.0_x64__8wekyb3d8bbwe, Microsoft.NET.Native.Runtime.2.2_2.2.28604.0_x64__8wekyb3d8bbwe...} IsPartiallyStaged : False SignatureKind : Store Status : Ok This method displays both the PackageFamilyName (Microsoft.Windows.Photos_8wekyb3d8bbwe in this case) and the location of the executable (C:\Program Files\WindowsApps\Microsoft.Windows.Photos_2021.21110.8005.0_x64__8wekyb3d8bbwe). A less hit-and-miss method would be to use keywords we found in the target field of the app shortcut (preferably, the beginning of the string, which we can always see) and use the Where-Object cmdlet to filter results using the PackageFamilyName itself2… like so: Get-AppxPackage | Where-Object {$_ -like &quot;*Photo*&quot;} with that out of the way, we can now go to the folder containing the app and find the AppxManifest.xml file there. In this file, we need to find the ApplicationID.3 For Microsoft Photos, for instance: &amp;lt;Application Id=&quot;App&quot; Executable=&quot;Microsoft.Photos.exe&quot; EntryPoint=&quot;AppStubCS.Windows.App&quot; ResourceGroup=&quot;AppGroup&quot;&amp;gt; The ApplicationID is just “App” in this case. So, the command to launch Microsoft Photos from the command line then becomes: explorer shell:appsfolder\Microsoft.Windows.Photos_8wekyb3d8bbwe!App I personally use Microsoft Powertoys for the same - &amp;gt; shell:appsfolder does the trick. &amp;#8617; The first method, if it works reliably, then creating the shortcut or going to shell:appsfolder is redundant. &amp;#8617; A simple document search should do. We should search for the Executable= property of the application, as one application package may contain more than one application. &amp;#8617;</summary></entry><entry><title type="html">Use Windows Fonts in WSL</title><link href="http://localhost:4000/tweaks/2021/12/02/wsl-fonts.html" rel="alternate" type="text/html" title="Use Windows Fonts in WSL" /><published>2021-12-02T12:00:00+05:30</published><updated>2021-12-02T12:00:00+05:30</updated><id>http://localhost:4000/tweaks/2021/12/02/wsl-fonts</id><content type="html" xml:base="http://localhost:4000/tweaks/2021/12/02/wsl-fonts.html">&lt;p&gt;Out of the box, it seems like &lt;strong&gt;WSL&lt;/strong&gt; comes with only a limited set of fonts. While for a CLI environment this might (?) be adequate, when we start using GUI apps in WSL (which it now supports via &lt;strong&gt;WSLg&lt;/strong&gt;), font support would really start to matter. When I was using web-browsers like &lt;strong&gt;qutebrowser&lt;/strong&gt; and &lt;strong&gt;surf&lt;/strong&gt; on WSL, I found that most glyphs were not rendered. Furthermore, while using the &lt;strong&gt;gnome-tweaks&lt;/strong&gt; tool which lists the fonts available, the list was very short. The available fonts can also be viewed with&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fc-list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which is basically the &lt;strong&gt;font-config&lt;/strong&gt; utility. Our plan is to use fonts installed in Windows instead of installing any more, following &lt;a href=&quot;https://www.linuxtut.com/en/6ea7665529b022eb5f45/&quot;&gt;this guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Windows fonts reside primarily in two locations:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Default fonts in &lt;em&gt;C:/Windows/Fonts&lt;/em&gt; directory (if installed for all users)&lt;/li&gt;
  &lt;li&gt;User-installed fonts in &lt;em&gt;%USERPROFILE%/AppData/Local/Microsoft/Windows/Fonts&lt;/em&gt; directory (if installed per-user)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We need to refer to these two locations. For that, we go to&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/fonts
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and create a new configuration file &lt;em&gt;local.conf&lt;/em&gt; with admin privileges:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vi local.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and write the following&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE fontconfig SYSTEM &quot;fonts.dtd&quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;fontconfig&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dir&amp;gt;&lt;/span&gt;/mnt/c/Windows/Fonts&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dir&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;dir&amp;gt;&lt;/span&gt;/mnt/c/Users/user-name/AppData/Local/Microsoft/Windows/Fonts&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dir&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/fontconfig&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where we have translated the paths to Linux-style paths. The second directory addition is a little iffy because it depends on the username (“user-name”). We can skip the second addition if one installs all fonts for all users: &lt;em&gt;Right-click on font &amp;gt; Install for all users&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Next we can refresh the font-cache:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fc-cache -fv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt; forces scan of directories where font-cache is present, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt; displays verbose output.&lt;/p&gt;

&lt;hr /&gt;</content><author><name></name></author><category term="tweaks" /><category term="wsl" /><category term="fonts" /><summary type="html">Out of the box, it seems like WSL comes with only a limited set of fonts. While for a CLI environment this might (?) be adequate, when we start using GUI apps in WSL (which it now supports via WSLg), font support would really start to matter. When I was using web-browsers like qutebrowser and surf on WSL, I found that most glyphs were not rendered. Furthermore, while using the gnome-tweaks tool which lists the fonts available, the list was very short. The available fonts can also be viewed with fc-list which is basically the font-config utility. Our plan is to use fonts installed in Windows instead of installing any more, following this guide. Windows fonts reside primarily in two locations: Default fonts in C:/Windows/Fonts directory (if installed for all users) User-installed fonts in %USERPROFILE%/AppData/Local/Microsoft/Windows/Fonts directory (if installed per-user) We need to refer to these two locations. For that, we go to cd /etc/fonts and create a new configuration file local.conf with admin privileges: sudo vi local.conf and write the following &amp;lt;?xml version=&quot;1.0&quot;?&amp;gt; &amp;lt;!DOCTYPE fontconfig SYSTEM &quot;fonts.dtd&quot;&amp;gt; &amp;lt;fontconfig&amp;gt; &amp;lt;dir&amp;gt;/mnt/c/Windows/Fonts&amp;lt;/dir&amp;gt; &amp;lt;dir&amp;gt;/mnt/c/Users/user-name/AppData/Local/Microsoft/Windows/Fonts&amp;lt;/dir&amp;gt; &amp;lt;/fontconfig&amp;gt; where we have translated the paths to Linux-style paths. The second directory addition is a little iffy because it depends on the username (“user-name”). We can skip the second addition if one installs all fonts for all users: Right-click on font &amp;gt; Install for all users. Next we can refresh the font-cache: fc-cache -fv where -f forces scan of directories where font-cache is present, -v displays verbose output.</summary></entry><entry><title type="html">Installing Minimal ADB and Removing Bloatware</title><link href="http://localhost:4000/tweaks/2021/11/09/min-adb-sw-removal.html" rel="alternate" type="text/html" title="Installing Minimal ADB and Removing Bloatware" /><published>2021-11-09T21:00:00+05:30</published><updated>2021-11-09T21:00:00+05:30</updated><id>http://localhost:4000/tweaks/2021/11/09/min-adb-sw-removal</id><content type="html" xml:base="http://localhost:4000/tweaks/2021/11/09/min-adb-sw-removal.html">&lt;p&gt;The &lt;strong&gt;Android Debug Bridge (ADB)&lt;/strong&gt; provides an interface between an Android device and a PC. The connection can be made using USB or Wi-Fi (if on the same network). From &lt;a href=&quot;https://www.xda-developers.com/install-adb-windows-macos-linux/&quot;&gt;this XDA guide&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;The internal structure of the Android Debug Bridge (ADB) is based on the classic client-server architecture. There are three components that make up the entire process.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The client, i.e. the PC you have connected to your Android device. We are sending commands to our device from the computer.&lt;/li&gt;
  &lt;li&gt;A daemon (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adbd&lt;/code&gt;), which runs commands on a device. The daemon runs as a background process on each device.&lt;/li&gt;
  &lt;li&gt;A server, which manages communication between the client and the daemon and runs as a background process on the PC.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Typically, to install &lt;strong&gt;ADB&lt;/strong&gt; one must install the &lt;strong&gt;Android SDK&lt;/strong&gt;, which is &lt;em&gt;&amp;gt;400 MB&lt;/em&gt; in size. It is sufficient to install the &lt;strong&gt;Android SDK Platform-Tools&lt;/strong&gt;, but that’s &lt;em&gt;&amp;gt;90 MB&lt;/em&gt;. For someone not looking forward to full-scale Android development, this seems like an overkill (it is). This is where the &lt;strong&gt;Minimal ADB&lt;/strong&gt; comes in. Found in &lt;a href=&quot;https://forum.xda-developers.com/t/tool-minimal-adb-and-fastboot-2-9-18.2317790/&quot;&gt;this XDA thread&lt;/a&gt;&lt;sup id=&quot;fnref:vernote&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:vernote&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, it provides all the necessary files in a neat package of &lt;em&gt;~3 MB&lt;/em&gt;. I use the portable version, as I don’t really need to install the program.&lt;/p&gt;

&lt;h3 id=&quot;working-with-adb&quot;&gt;Working with adb&lt;/h3&gt;

&lt;p&gt;To start working with &lt;strong&gt;adb&lt;/strong&gt; we need to go to &lt;em&gt;Developer Options&lt;/em&gt;&lt;sup id=&quot;fnref:dops&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:dops&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; in Settings and enable USB debugging. Now, we can fire up a shell and type&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb devices
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;./adb &amp;lt;commands&amp;gt;&lt;/code&gt; in the folder where &lt;strong&gt;adb&lt;/strong&gt; is, if not in &lt;em&gt;PATH&lt;/em&gt;.) which shows the devices connected via &lt;strong&gt;ADB&lt;/strong&gt;. Initially, there will be none. On a fresh start, this will start the daemon:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* daemon not running; starting now at tcp:5037
* daemon started successfully
List of devices attached

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now if we connect our phone via USB to the computer, we would prompted for permission to debug &lt;em&gt;on our phone&lt;/em&gt; (if the adb server is running - if not, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb devices&lt;/code&gt;). If allowed, our device will show up with a serial number on the list.&lt;/p&gt;

&lt;h4 id=&quot;connecting-via-wi-fi&quot;&gt;Connecting via Wi-Fi&lt;/h4&gt;

&lt;p&gt;It is also possible to connect to the device via Wi-Fi.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;On Android 10 and lower&lt;/strong&gt;, the initial setup requires a USB connection. According to &lt;a href=&quot;https://developer.android.com/studio/command-line/adb/?gclid=CjwKCAjw2dD7BRASEiwAWCtCbxKzwu63T-HpLaIp8ASO1aNA6aRl7_8Wvc2LqCvf3BI3umOlQQaOtBoCQrEQAvD_BwE&amp;amp;gclsrc=aw.ds#wireless&quot;&gt;this guide&lt;/a&gt;,
    &lt;ul&gt;
      &lt;li&gt;We must first connect the device via USB.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;We set the device to listen on a port (here, &lt;em&gt;5555&lt;/em&gt;) for a TCP/IP connection:&lt;/p&gt;

        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb tcpip 5555
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;and disconnect the USB cable.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;We need to find the IP address of the phone on the network. This can be usually found at &lt;em&gt;About phone &amp;gt; Status info &amp;gt; IP address&lt;/em&gt;.&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;We can now run&lt;/p&gt;

        &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb connect ip_addr:5555
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;to connect to the device. If successful, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb devices&lt;/code&gt; will list the device.&lt;sup id=&quot;fnref:wifidbg&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:wifidbg&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; To connect to this device anytime in future, we just need to run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;connect&lt;/code&gt; command with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip_addr&lt;/code&gt; &lt;em&gt;at that time&lt;/em&gt; at port &lt;em&gt;5555&lt;/em&gt;.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;On Android 11 (and higher?)&lt;/strong&gt;, no USB connection is required. Following &lt;a href=&quot;https://developer.android.com/studio/run/device#wireless&quot;&gt;this guide&lt;/a&gt;,
    &lt;ul&gt;
      &lt;li&gt;We must turn on &lt;em&gt;Wireless Debugging&lt;/em&gt; in &lt;em&gt;Developer Settings&lt;/em&gt; on our phone. On opening the &lt;em&gt;Wireless Debugging&lt;/em&gt; settings, we will have the option to &lt;em&gt;“Pair device with pairing code”&lt;/em&gt;, which will show a 6-digit pairing code alongwith the IP address of the phone and a port to connect to.&lt;/li&gt;
      &lt;li&gt;Run
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; adb pair ip_addr:port
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;using values from last step. We will be asked for the pairing code next. Once entered, pairing should succeed and our phone should list the name of the PC under &lt;em&gt;Paired devices&lt;/em&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;Now we connect:
        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; adb connect ip_addr:port
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
        &lt;p&gt;&lt;em&gt;This port will in general NOT be same as the previous one!&lt;/em&gt; This port number is listed under the &lt;em&gt;Wireless Debugging&lt;/em&gt; settings. This completes the setup. Also, in this case, the port to connect to keeps changing - so when we need to connect to the device at a later time, we need to input the correct port number as well.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Note 1:&lt;/strong&gt; If we want to disconnect, we can simply run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb kill-server&lt;/code&gt;. All devices will be disconnected.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note 2:&lt;/strong&gt; If we want a detailed list of connected devices, we can run&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adb devices &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which displays more info like the model number and device name.&lt;/p&gt;

&lt;p&gt;We can access the adb shell by typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;adb shell&lt;/code&gt;. This will work only if a device is connected, as the shell opens at the device root &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;uninstalling-packages&quot;&gt;Uninstalling packages&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pm&lt;/code&gt; is the package manager of adb. In the adb shell, we can write&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;m30s:/ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pm list packages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(the device name is displayed first: here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m30s&lt;/code&gt;)
to list all installed packages (the list will be long!). A few Linux commands also work in the shell, hence we could, say, grab only the apps with the word ‘samsung’ in it:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;m30s:/ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pm list packages | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'samsung'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally, we can use&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;m30s:/ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pm uninstall –k &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; 0 &amp;lt;package-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;to uninstall packages.&lt;sup id=&quot;fnref:unstnote&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:unstnote&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-k&lt;/code&gt; switch keeps data and user cache. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--user 0&lt;/code&gt; option uninstalls only for the current user (of the device).&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:vernote&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;This thread was last updated on &lt;em&gt;02-09-2018&lt;/em&gt; and the ADB version packaged is old (v1.0.39). Here’s a &lt;a href=&quot;https://forum.xda-developers.com/t/tool-windows-tiny-adb-fastboot-august-2021.3944288/&quot;&gt;thread&lt;/a&gt; that provides &lt;strong&gt;Tiny ADB and Fastboot&lt;/strong&gt; was updated on &lt;em&gt;August 2021&lt;/em&gt; and uses v1.0.41 (size: &lt;em&gt;~7 MB&lt;/em&gt;). &lt;a href=&quot;#fnref:vernote&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:dops&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;One needs to reveal the &lt;em&gt;Developer Settings&lt;/em&gt; by tapping on &lt;em&gt;Build number&lt;/em&gt; in phone software information 7 times quickly in succession. &lt;a href=&quot;#fnref:dops&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:wifidbg&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Interestingly, this method does not require turning on &lt;em&gt;Wireless debugging&lt;/em&gt; in the phone. &lt;a href=&quot;#fnref:wifidbg&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:unstnote&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Without rooting a device, we technically cannot uninstall system packages using adb. This is because one does not have write permissions on the &lt;em&gt;/system&lt;/em&gt; partition. (&lt;a href=&quot;https://gitlab.com/W1nst0n/universal-android-debloater/-/wikis/FAQ&quot;&gt;More on this&lt;/a&gt;) We hide them from the user so these apps do not run anymore. They’re still on device storage. &lt;a href=&quot;#fnref:unstnote&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="tweaks" /><category term="adb" /><category term="android" /><summary type="html">The Android Debug Bridge (ADB) provides an interface between an Android device and a PC. The connection can be made using USB or Wi-Fi (if on the same network). From this XDA guide: The internal structure of the Android Debug Bridge (ADB) is based on the classic client-server architecture. There are three components that make up the entire process. The client, i.e. the PC you have connected to your Android device. We are sending commands to our device from the computer. A daemon (adbd), which runs commands on a device. The daemon runs as a background process on each device. A server, which manages communication between the client and the daemon and runs as a background process on the PC. Typically, to install ADB one must install the Android SDK, which is &amp;gt;400 MB in size. It is sufficient to install the Android SDK Platform-Tools, but that’s &amp;gt;90 MB. For someone not looking forward to full-scale Android development, this seems like an overkill (it is). This is where the Minimal ADB comes in. Found in this XDA thread1, it provides all the necessary files in a neat package of ~3 MB. I use the portable version, as I don’t really need to install the program. Working with adb To start working with adb we need to go to Developer Options2 in Settings and enable USB debugging. Now, we can fire up a shell and type adb devices (or ./adb &amp;lt;commands&amp;gt; in the folder where adb is, if not in PATH.) which shows the devices connected via ADB. Initially, there will be none. On a fresh start, this will start the daemon: * daemon not running; starting now at tcp:5037 * daemon started successfully List of devices attached Now if we connect our phone via USB to the computer, we would prompted for permission to debug on our phone (if the adb server is running - if not, run adb devices). If allowed, our device will show up with a serial number on the list. Connecting via Wi-Fi It is also possible to connect to the device via Wi-Fi. On Android 10 and lower, the initial setup requires a USB connection. According to this guide, We must first connect the device via USB. We set the device to listen on a port (here, 5555) for a TCP/IP connection: adb tcpip 5555 and disconnect the USB cable. We need to find the IP address of the phone on the network. This can be usually found at About phone &amp;gt; Status info &amp;gt; IP address. We can now run adb connect ip_addr:5555 to connect to the device. If successful, adb devices will list the device.3 To connect to this device anytime in future, we just need to run the connect command with the ip_addr at that time at port 5555. On Android 11 (and higher?), no USB connection is required. Following this guide, We must turn on Wireless Debugging in Developer Settings on our phone. On opening the Wireless Debugging settings, we will have the option to “Pair device with pairing code”, which will show a 6-digit pairing code alongwith the IP address of the phone and a port to connect to. Run adb pair ip_addr:port using values from last step. We will be asked for the pairing code next. Once entered, pairing should succeed and our phone should list the name of the PC under Paired devices. Now we connect: adb connect ip_addr:port This port will in general NOT be same as the previous one! This port number is listed under the Wireless Debugging settings. This completes the setup. Also, in this case, the port to connect to keeps changing - so when we need to connect to the device at a later time, we need to input the correct port number as well. Note 1: If we want to disconnect, we can simply run adb kill-server. All devices will be disconnected. Note 2: If we want a detailed list of connected devices, we can run adb devices -l which displays more info like the model number and device name. We can access the adb shell by typing adb shell. This will work only if a device is connected, as the shell opens at the device root /. Uninstalling packages pm is the package manager of adb. In the adb shell, we can write m30s:/ $ pm list packages (the device name is displayed first: here m30s) to list all installed packages (the list will be long!). A few Linux commands also work in the shell, hence we could, say, grab only the apps with the word ‘samsung’ in it: m30s:/ $ pm list packages | grep 'samsung' Finally, we can use m30s:/ $ pm uninstall –k --user 0 &amp;lt;package-name&amp;gt; to uninstall packages.4 The -k switch keeps data and user cache. The --user 0 option uninstalls only for the current user (of the device). This thread was last updated on 02-09-2018 and the ADB version packaged is old (v1.0.39). Here’s a thread that provides Tiny ADB and Fastboot was updated on August 2021 and uses v1.0.41 (size: ~7 MB). &amp;#8617; One needs to reveal the Developer Settings by tapping on Build number in phone software information 7 times quickly in succession. &amp;#8617; Interestingly, this method does not require turning on Wireless debugging in the phone. &amp;#8617; Without rooting a device, we technically cannot uninstall system packages using adb. This is because one does not have write permissions on the /system partition. (More on this) We hide them from the user so these apps do not run anymore. They’re still on device storage. &amp;#8617;</summary></entry><entry><title type="html">Setting up Jekyll on WSL</title><link href="http://localhost:4000/setup/2021/10/26/jekyll-setup-wsl.html" rel="alternate" type="text/html" title="Setting up Jekyll on WSL" /><published>2021-10-26T23:55:00+05:30</published><updated>2021-10-26T23:55:00+05:30</updated><id>http://localhost:4000/setup/2021/10/26/jekyll-setup-wsl</id><content type="html" xml:base="http://localhost:4000/setup/2021/10/26/jekyll-setup-wsl.html">&lt;p&gt;This guide is mainly an accumulation of information from two sources, both from the &lt;em&gt;Jekyll Docs&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/installation/windows/&quot;&gt;Windows Installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/docs/troubleshooting/#no-sudo&quot;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation:&lt;/h3&gt;

&lt;p&gt;We plan to install Jekyll&lt;sup id=&quot;fnref:vernote&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:vernote&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; on &lt;strong&gt;Ubuntu 20.04 on WSL&lt;/strong&gt;. For this we have to install &lt;strong&gt;Ruby&lt;/strong&gt;. The Ruby &lt;em&gt;gems&lt;/em&gt;, however, we want to install only for the user (instead of a system-wide installation). For this purpose we edit the &lt;em&gt;~/.bashrc&lt;/em&gt; file and add the following:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Ruby exports&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GEM_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/gems
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/gems/bin:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which basically sets the path where the &lt;em&gt;gems&lt;/em&gt; will be installed. We need to source the &lt;em&gt;~/.bashrc&lt;/em&gt; file now…&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we start with the &lt;strong&gt;Ruby&lt;/strong&gt; installation. We install this from the &lt;strong&gt;BrightBox&lt;/strong&gt; PPA (Personal Package Archive):&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;which hosts optimized versions of Ruby for Ubuntu. &lt;a href=&quot;https://jekyllrb.com/docs/installation/windows/&quot;&gt;(ref)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-add-repository ppa:brightbox/ruby-ng
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ruby2.5 ruby2.5-dev build-essential dh-autoreconf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Update our gems:&lt;sup id=&quot;fnref:failnote1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:failnote1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and finally install &lt;strong&gt;Jekyll&lt;/strong&gt; and &lt;strong&gt;Bundler&lt;/strong&gt;&lt;sup id=&quot;fnref:failnote2&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:failnote2&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And then we can check the version using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll -v&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;new-blog-setup&quot;&gt;New blog setup:&lt;/h3&gt;

&lt;p&gt;A blog can be quickly set up with&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll new sitename
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which will create a folder named &lt;em&gt;sitename&lt;/em&gt; with all the relevant files. After that, we can &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd sitename&lt;/code&gt; and start a server at that location:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve &lt;span class=&quot;nt&quot;&gt;--force-polling&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;(As of 26-Oct-2021)&lt;/em&gt; Without the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--force-polling&lt;/code&gt; option, changes made to files in the site are not reflected upon reload in the website. The command itself displays this warning:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Auto-regeneration may not work on some Windows versions.
Please see: https://github.com/Microsoft/BashOnWindows/issues/216
If it does not work, please upgrade Bash on Windows or run Jekyll with --no-watch.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;One can also add the option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--livereload&lt;/code&gt; to have the website reload automatically when the files are changed. Solution from issue &lt;a href=&quot;https://github.com/microsoft/WSL/issues/216#issuecomment-716047269&quot;&gt;#216&lt;/a&gt; in the &lt;em&gt;WSL repo&lt;/em&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:vernote&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;We use a fairly old version of &lt;strong&gt;Ruby&lt;/strong&gt; (2.5.8p224) here, following the tutorial. It’s not necessary to do this, but various gems have to have versions whicha re consistent with each other for the whole thing to work. So this is a safe bet. &lt;a href=&quot;#fnref:vernote&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:failnote1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;In my case, a few gems failed to update properly. &lt;a href=&quot;#fnref:failnote1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:failnote2&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;By default, this fails (version conflict between &lt;strong&gt;RubyGems&lt;/strong&gt; and &lt;strong&gt;Ruby&lt;/strong&gt;?).&lt;/p&gt;
      &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Fetching: public_suffix-4.0.6.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
ERROR:  While executing gem ... &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ArgumentError&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
wrong number of arguments &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;given 4, expected 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
      &lt;p&gt;however, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem uninstall psych&lt;/code&gt; fixes the issue and installation completes successfully (&lt;a href=&quot;https://stackguides.com/questions/68899508/gem-install-wrong-number-of-arguments-given-4-expected-1&quot;&gt;source&lt;/a&gt;). &lt;span style=&quot;color:red&quot;&gt;&lt;em&gt;TO BE INVESTIGATED.&lt;/em&gt;&lt;/span&gt; &lt;a href=&quot;#fnref:failnote2&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="setup" /><category term="jekyll" /><category term="wsl" /><summary type="html">This guide is mainly an accumulation of information from two sources, both from the Jekyll Docs: Windows Installation Troubleshooting Installation: We plan to install Jekyll1 on Ubuntu 20.04 on WSL. For this we have to install Ruby. The Ruby gems, however, we want to install only for the user (instead of a system-wide installation). For this purpose we edit the ~/.bashrc file and add the following: # Ruby exports export GEM_HOME=$HOME/gems export PATH=$HOME/gems/bin:$PATH which basically sets the path where the gems will be installed. We need to source the ~/.bashrc file now… source ~/.bashrc Now we start with the Ruby installation. We install this from the BrightBox PPA (Personal Package Archive): which hosts optimized versions of Ruby for Ubuntu. (ref) sudo apt-add-repository ppa:brightbox/ruby-ng sudo apt-get update sudo apt-get install ruby2.5 ruby2.5-dev build-essential dh-autoreconf Update our gems:2 gem update and finally install Jekyll and Bundler3: gem install jekyll bundler And then we can check the version using jekyll -v. New blog setup: A blog can be quickly set up with jekyll new sitename which will create a folder named sitename with all the relevant files. After that, we can cd sitename and start a server at that location: bundle exec jekyll serve --force-polling (As of 26-Oct-2021) Without the --force-polling option, changes made to files in the site are not reflected upon reload in the website. The command itself displays this warning: Auto-regeneration may not work on some Windows versions. Please see: https://github.com/Microsoft/BashOnWindows/issues/216 If it does not work, please upgrade Bash on Windows or run Jekyll with --no-watch. One can also add the option --livereload to have the website reload automatically when the files are changed. Solution from issue #216 in the WSL repo. We use a fairly old version of Ruby (2.5.8p224) here, following the tutorial. It’s not necessary to do this, but various gems have to have versions whicha re consistent with each other for the whole thing to work. So this is a safe bet. &amp;#8617; In my case, a few gems failed to update properly. &amp;#8617; By default, this fails (version conflict between RubyGems and Ruby?). Fetching: public_suffix-4.0.6.gem (100%) ERROR: While executing gem ... (ArgumentError) wrong number of arguments (given 4, expected 1) however, gem uninstall psych fixes the issue and installation completes successfully (source). TO BE INVESTIGATED. &amp;#8617;</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2021/10/23/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2021-10-23T01:33:33+05:30</published><updated>2021-10-23T01:33:33+05:30</updated><id>http://localhost:4000/jekyll/update/2021/10/23/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2021/10/23/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll requires blog post files to be named according to the following format:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR&lt;/code&gt; is a four-digit number, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MONTH&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DAY&lt;/code&gt; are both two-digit numbers, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MARKUP&lt;/code&gt; is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. Jekyll requires blog post files to be named according to the following format: YEAR-MONTH-DAY-title.MARKUP Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts &quot;Hi, #{name}&quot; end print_hi('Tom') #=&amp;gt; prints 'Hi, Tom' to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.</summary></entry><entry><title type="html">Customizing the Terminal Prompt with oh-my-posh</title><link href="http://localhost:4000/tweaks/2021/10/22/change-term-prompt-omp.html" rel="alternate" type="text/html" title="Customizing the Terminal Prompt with oh-my-posh" /><published>2021-10-22T16:00:00+05:30</published><updated>2021-10-22T16:00:00+05:30</updated><id>http://localhost:4000/tweaks/2021/10/22/change-term-prompt-omp</id><content type="html" xml:base="http://localhost:4000/tweaks/2021/10/22/change-term-prompt-omp.html">&lt;p&gt;The module &lt;strong&gt;oh-my-posh&lt;/strong&gt; is the Windows equivalent of &lt;strong&gt;oh-my-zsh&lt;/strong&gt; for Linux. It can help create pretty prompts which may provide visual aids with &lt;em&gt;git&lt;/em&gt; (among other things?&lt;sup id=&quot;fnref:obs1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:obs1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;). I stumbled upon this idea on &lt;a href=&quot;https://zimmergren.net/making-windows-terminal-look-awesome-with-oh-my-posh/&quot;&gt;this blog&lt;/a&gt;, but really, it’s a very commonly used module. I’m going to use the &lt;strong&gt;Windows Terminal&lt;/strong&gt;.&lt;/p&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#installing-a-nerdfont&quot; id=&quot;markdown-toc-installing-a-nerdfont&quot;&gt;Installing a NerdFont&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#shell-independent-installation-in-windows&quot; id=&quot;markdown-toc-shell-independent-installation-in-windows&quot;&gt;Shell-independent installation in Windows&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#remarks&quot; id=&quot;markdown-toc-remarks&quot;&gt;Remarks&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#only-for-powershell&quot; id=&quot;markdown-toc-only-for-powershell&quot;&gt;Only for Powershell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;installing-a-nerdfont&quot;&gt;Installing a NerdFont&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;oh-my-posh&lt;/strong&gt; uses glyphs that are not present in standard fonts. To get them, we need to install one of many &lt;em&gt;NerdFonts&lt;/em&gt; from the &lt;a href=&quot;https://www.nerdfonts.com/font-downloads&quot;&gt;website&lt;/a&gt;. &lt;strong&gt;Windows Terminal&lt;/strong&gt; by default uses &lt;em&gt;Cascadia&lt;/em&gt; fonts.  I prefer to use &lt;em&gt;Fira Code&lt;/em&gt; instead. So we can just search for &lt;em&gt;Fira Code&lt;/em&gt; in the website (or download any font - doesn’t really matter). The fonts will be downloaded in a &lt;em&gt;zip&lt;/em&gt; format.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Install&lt;/em&gt; and check the name of the font in the font file. In my case, it is “FiraCode Nerd Font”. Now we can go to Terminal settings by pressing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ctrl+Shift+,&lt;/code&gt; which will open the settings in JSON format, and add this to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;profiles&quot;: &quot;defaults&quot;:&lt;/code&gt; key:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;font&quot;: 
            {
                &quot;face&quot;: &quot;FiraCode Nerd Font&quot;
            }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is the place where we can adjust the size and style of the font if desired, e.g &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;size&quot;: 10&lt;/code&gt;. Save and Terminal refreshes, now using the installed NerdFont.&lt;/p&gt;

&lt;h3 id=&quot;shell-independent-installation-in-windows&quot;&gt;Shell-independent installation in Windows&lt;/h3&gt;

&lt;p&gt;From &lt;a href=&quot;https://ohmyposh.dev/docs/windows&quot;&gt;this guide&lt;/a&gt;. First, we need to install &lt;strong&gt;oh-my-posh&lt;/strong&gt;. We can do this using &lt;strong&gt;winget&lt;/strong&gt;, the package manager CLI in Windows:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;winget install JanDeDobbeleer.OhMyPosh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now we will have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oh-my-posh.exe&lt;/code&gt; application which we can use to customize our prompt. For WSL, this will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oh-my-posh-wsl&lt;/code&gt; instead. Themes are present at the location &lt;em&gt;~\AppData\Local\Programs\oh-my-posh\themes&lt;/em&gt;. We can list all the theme names:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls ~\AppData\Local\Programs\oh-my-posh\themes\
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which are just JSON files with the name format &lt;em&gt;*.omp.json&lt;/em&gt;. To actually &lt;em&gt;view&lt;/em&gt; the themes in action, however, we can run the following command:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Get-ChildItem&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;~\AppData\Local\Programs\oh-my-posh\themes\*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Include&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'*.omp.json'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sort-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForEach-Object&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Process&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$esc&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$esc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[1m&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;BaseName&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$esc&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[0m&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oh-my-posh&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FullName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--pwd&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$PWD&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Write-Host&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which basically loops through all the JSON files in the folder and prints a custom prompt for each. To actually change the prompt, we can run&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;oh-my-posh&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--init&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--shell&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pwsh&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;~/AppData/Local/Programs/oh-my-posh/themes/jandedobbeleer.omp.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Invoke-Expression&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;in Powershell, or&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;oh-my-posh-wsl &lt;span class=&quot;nt&quot;&gt;--init&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--shell&lt;/span&gt; bash &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$USERPROFILE&lt;/span&gt;/AppData/Local/Programs/oh-my-posh/themes/jandedobbeleer.omp.json&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;on &lt;em&gt;bash&lt;/em&gt; in WSL.&lt;sup id=&quot;fnref:envvarnote&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:envvarnote&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;To make changes permanent, we need to add this command to the profile of the respective shells (&lt;em&gt;$profile&lt;/em&gt; for Powershell and &lt;em&gt;.bashrc&lt;/em&gt; for bash).&lt;/p&gt;

&lt;h4 id=&quot;remarks&quot;&gt;Remarks&lt;/h4&gt;

&lt;p&gt;Even though it seems like a PITA&lt;sup id=&quot;fnref:pita&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:pita&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; to write such a complicated path again and again (especially in WSL), once we’ve written it, all we have to do is modify the name of the theme (here &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jandedobbeleer&lt;/code&gt;) and not touch the path at all. However, if we are to &lt;a href=&quot;https://ohmyposh.dev/docs/configure&quot;&gt;modify these themes&lt;/a&gt; to our liking, it is wise to copy the JSON files to another location and make necessary changes, and &lt;em&gt;then&lt;/em&gt; make the &lt;em&gt;shell profile&lt;/em&gt; point to that location.&lt;/p&gt;

&lt;h3 id=&quot;only-for-powershell&quot;&gt;Only for Powershell&lt;/h3&gt;

&lt;p&gt;To start with, we run:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Install-Module&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;oh-my-posh&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-Scope&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CurrentUser&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;in Powershell. This installs the &lt;strong&gt;oh-my-posh&lt;/strong&gt; module for the current user (admin privileges not required?).&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:obs1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;For instance, it marks the root folder of this Jekyll website with a little ruby icon (Jekyll uses Ruby and the root folder has a &lt;em&gt;Gemfile&lt;/em&gt;) or a Python symbol when python files are present. &lt;a href=&quot;#fnref:obs1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:envvarnote&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$USERPROFILE&lt;/code&gt; does not exist by default. It has to be &lt;em&gt;forwarded&lt;/em&gt; from Windows to WSL via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WSLENV&lt;/code&gt; variable:&lt;/p&gt;
      &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;setx&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;WSLENV&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;USERPROFILE/up&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
      &lt;p&gt;and after a session restart, the Windows environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%USERPROFILE%&lt;/code&gt; containing the path to the user profile is available at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$USERPROFILE&lt;/code&gt; in WSL (translated to a Linux-style path, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/p&lt;/code&gt; switch does this). (&lt;a href=&quot;https://superuser.com/a/1546688/1171201&quot;&gt;Source&lt;/a&gt;) &lt;a href=&quot;#fnref:envvarnote&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:pita&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;Pain-In-The-Ass. &lt;a href=&quot;#fnref:pita&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="tweaks" /><category term="windows" /><category term="powershell" /><category term="prompt" /><category term="oh-my-posh" /><summary type="html">The module oh-my-posh is the Windows equivalent of oh-my-zsh for Linux. It can help create pretty prompts which may provide visual aids with git (among other things?1). I stumbled upon this idea on this blog, but really, it’s a very commonly used module. I’m going to use the Windows Terminal. Installing a NerdFont Shell-independent installation in Windows Remarks Only for Powershell Installing a NerdFont oh-my-posh uses glyphs that are not present in standard fonts. To get them, we need to install one of many NerdFonts from the website. Windows Terminal by default uses Cascadia fonts. I prefer to use Fira Code instead. So we can just search for Fira Code in the website (or download any font - doesn’t really matter). The fonts will be downloaded in a zip format. Install and check the name of the font in the font file. In my case, it is “FiraCode Nerd Font”. Now we can go to Terminal settings by pressing Ctrl+Shift+, which will open the settings in JSON format, and add this to the &quot;profiles&quot;: &quot;defaults&quot;: key: &quot;font&quot;: { &quot;face&quot;: &quot;FiraCode Nerd Font&quot; } This is the place where we can adjust the size and style of the font if desired, e.g &quot;size&quot;: 10. Save and Terminal refreshes, now using the installed NerdFont. Shell-independent installation in Windows From this guide. First, we need to install oh-my-posh. We can do this using winget, the package manager CLI in Windows: winget install JanDeDobbeleer.OhMyPosh Now we will have the oh-my-posh.exe application which we can use to customize our prompt. For WSL, this will be oh-my-posh-wsl instead. Themes are present at the location ~\AppData\Local\Programs\oh-my-posh\themes. We can list all the theme names: ls ~\AppData\Local\Programs\oh-my-posh\themes\ which are just JSON files with the name format *.omp.json. To actually view the themes in action, however, we can run the following command: Get-ChildItem -Path &quot;~\AppData\Local\Programs\oh-my-posh\themes\*&quot; -Include '*.omp.json' | Sort-Object Name | ForEach-Object -Process { $esc = [char]27 Write-Host &quot;&quot; Write-Host &quot;$esc[1m$($_.BaseName)$esc[0m&quot; Write-Host &quot;&quot; oh-my-posh --config $($_.FullName) --pwd $PWD Write-Host &quot;&quot; } which basically loops through all the JSON files in the folder and prints a custom prompt for each. To actually change the prompt, we can run oh-my-posh --init --shell pwsh --config ~/AppData/Local/Programs/oh-my-posh/themes/jandedobbeleer.omp.json | Invoke-Expression in Powershell, or eval &quot;$(oh-my-posh-wsl --init --shell bash --config $USERPROFILE/AppData/Local/Programs/oh-my-posh/themes/jandedobbeleer.omp.json)&quot; on bash in WSL.2 To make changes permanent, we need to add this command to the profile of the respective shells ($profile for Powershell and .bashrc for bash). Remarks Even though it seems like a PITA3 to write such a complicated path again and again (especially in WSL), once we’ve written it, all we have to do is modify the name of the theme (here jandedobbeleer) and not touch the path at all. However, if we are to modify these themes to our liking, it is wise to copy the JSON files to another location and make necessary changes, and then make the shell profile point to that location. Only for Powershell To start with, we run: Install-Module oh-my-posh -Scope CurrentUser in Powershell. This installs the oh-my-posh module for the current user (admin privileges not required?). For instance, it marks the root folder of this Jekyll website with a little ruby icon (Jekyll uses Ruby and the root folder has a Gemfile) or a Python symbol when python files are present. &amp;#8617; The environment variable $USERPROFILE does not exist by default. It has to be forwarded from Windows to WSL via the WSLENV variable: setx WSLENV USERPROFILE/up and after a session restart, the Windows environment variable %USERPROFILE% containing the path to the user profile is available at $USERPROFILE in WSL (translated to a Linux-style path, the /p switch does this). (Source) &amp;#8617; Pain-In-The-Ass. &amp;#8617;</summary></entry><entry><title type="html">Customizing the Powershell Prompt</title><link href="http://localhost:4000/tweaks/2021/10/22/change-pwsh-prompt.html" rel="alternate" type="text/html" title="Customizing the Powershell Prompt" /><published>2021-10-22T15:30:00+05:30</published><updated>2021-10-22T15:30:00+05:30</updated><id>http://localhost:4000/tweaks/2021/10/22/change-pwsh-prompt</id><content type="html" xml:base="http://localhost:4000/tweaks/2021/10/22/change-pwsh-prompt.html">&lt;p&gt;Initially I was scanning through Google as usual and found some solutions. The key idea was taken from &lt;a href=&quot;https://superuser.com/a/1259916/1171201&quot;&gt;this SOF thread&lt;/a&gt;. One needs to use &lt;em&gt;Virtual Terminal Sequences&lt;/em&gt; to do this.&lt;/p&gt;

&lt;h3 id=&quot;using-virtual-terminal-sequences&quot;&gt;Using &lt;em&gt;Virtual Terminal Sequences&lt;/em&gt;:&lt;/h3&gt;

&lt;p&gt;From the Microsoft documentation on &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences&quot;&gt;this&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Virtual terminal sequences&lt;/strong&gt; are control character sequences that can control cursor movement, color/font mode, and other operations when written to the output stream.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We’re interested in &lt;strong&gt;color/font mode&lt;/strong&gt; to change the appearance of our prompt. We need a sequence of the format&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ESC[&amp;lt;n&amp;gt;m
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There are two parts to this:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We need to the start with the &lt;em&gt;ASCII ESC character&lt;/em&gt; (hex 0x1B). This can be achieved by writing the expression &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$([char]27)&lt;/code&gt; in Powershell.&lt;/li&gt;
  &lt;li&gt;For &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;n&amp;gt;&lt;/code&gt; we insert an appropriate integer code that corresponds to a particular formatting style. The entire list can be found in the same &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/console/console-virtual-terminal-sequences#text-formatting&quot;&gt;doc page&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we combine the two parts, we write something like:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which applies &lt;em&gt;non-bold/bright &lt;span style=&quot;color:rgb(88,209,235)&quot;&gt;&lt;strong&gt;cyan&lt;/strong&gt;&lt;/span&gt; to foreground&lt;/em&gt;. The text that follows will acquire this style. To negate all styles we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESC[0m&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;custom-colours&quot;&gt;Custom colours:&lt;/h4&gt;

&lt;p&gt;With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESC[38;2;&amp;lt;r&amp;gt;;&amp;lt;g&amp;gt;;&amp;lt;b&amp;gt;m&lt;/code&gt;(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ESC[48;...&lt;/code&gt;) one can use any &lt;em&gt;(r, g, b)&lt;/em&gt; value for the text foreground (background). For instance, &lt;em&gt;(250, 128, 114)&lt;/em&gt; is the &lt;span style=&quot;color:rgb(250,128,114)&quot;&gt;&lt;strong&gt;salmon&lt;/strong&gt;&lt;/span&gt; colour.&lt;/p&gt;

&lt;h3 id=&quot;changing-the-prompt-permanently&quot;&gt;Changing the prompt permanently&lt;/h3&gt;

&lt;p&gt;We modify the Powershell &lt;em&gt;profile&lt;/em&gt; file to make changes permanent. (&lt;a href=&quot;/tweaks/2021/10/22/pwsh-profile.html&quot;&gt;Creating profiles&lt;/a&gt;) We add the following lines:&lt;/p&gt;
&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ESC&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;27&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prompt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Test-Path&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;variable:/PSDebugContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'[DBG]: '&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ESC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[38;2;250;128;114mPS@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ESC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[38;2;127;255;255m&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ESC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[4m&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-Location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ESC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[24m&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;$NestedPromptLevel&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-ge&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;gt;&amp;gt;'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ESC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[0m&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;We have stored the &lt;em&gt;ESC&lt;/em&gt; character in a variable to ease our life.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prompt()&lt;/code&gt; function is used to modify the prompt. The code within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;prompt()&lt;/code&gt; function has been obtained from the &lt;a href=&quot;https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_prompts?view=powershell-7.1#built-in-prompt&quot;&gt;doc&lt;/a&gt; on Powershell prompt.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;built-in prompt&lt;/em&gt; has been modified&lt;sup id=&quot;fnref:wrongsol&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:wrongsol&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; by inserting sequences at appropriate places. Currently, it should look like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/res/pwsh_prompt_211022/newprompt.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For changes to take effect immediately, source the profile using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;. $profile&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:wrongsol&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;The original SOF solution (and many other places) give this solution:&lt;/p&gt;
      &lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kr&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;prompt&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ESC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[93mPS &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ESC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[36m&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$executionContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SessionState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CurrentLocation&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)$(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;gt;'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$nestedPromptLevel&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;) &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ESC&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;[0m&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
      &lt;p&gt;but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$('&amp;gt;' * ($nestedPromptLevel + 1))&lt;/code&gt; causes issues. More specifically, the character &lt;strong&gt;m&lt;/strong&gt; appeared automatically after the prompt when I was typing a period &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; which is undesirable behaviour. &lt;span style=&quot;color:red&quot;&gt;&lt;em&gt;TO BE INVESTIGATED.&lt;/em&gt;&lt;/span&gt; &lt;a href=&quot;#fnref:wrongsol&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="tweaks" /><category term="windows" /><category term="powershell" /><category term="prompt" /><summary type="html">Initially I was scanning through Google as usual and found some solutions. The key idea was taken from this SOF thread. One needs to use Virtual Terminal Sequences to do this. Using Virtual Terminal Sequences: From the Microsoft documentation on this: Virtual terminal sequences are control character sequences that can control cursor movement, color/font mode, and other operations when written to the output stream. We’re interested in color/font mode to change the appearance of our prompt. We need a sequence of the format ESC[&amp;lt;n&amp;gt;m There are two parts to this: We need to the start with the ASCII ESC character (hex 0x1B). This can be achieved by writing the expression $([char]27) in Powershell. For &amp;lt;n&amp;gt; we insert an appropriate integer code that corresponds to a particular formatting style. The entire list can be found in the same doc page. When we combine the two parts, we write something like: $([char]27)[36m which applies non-bold/bright cyan to foreground. The text that follows will acquire this style. To negate all styles we use ESC[0m. Custom colours: With ESC[38;2;&amp;lt;r&amp;gt;;&amp;lt;g&amp;gt;;&amp;lt;b&amp;gt;m(ESC[48;...) one can use any (r, g, b) value for the text foreground (background). For instance, (250, 128, 114) is the salmon colour. Changing the prompt permanently We modify the Powershell profile file to make changes permanent. (Creating profiles) We add the following lines: $ESC = [char]27 function prompt { $(if (Test-Path variable:/PSDebugContext) { '[DBG]: ' } else { '' }) + &quot;$ESC[38;2;250;128;114mPS@$ESC[38;2;127;255;255m$ESC[4m&quot; + $(Get-Location) + &quot;$ESC[24m&quot; + $(if ($NestedPromptLevel -ge 1) { '&amp;gt;&amp;gt;' }) + &quot;&amp;gt; $ESC[0m&quot; } where We have stored the ESC character in a variable to ease our life. The prompt() function is used to modify the prompt. The code within the prompt() function has been obtained from the doc on Powershell prompt. The built-in prompt has been modified1 by inserting sequences at appropriate places. Currently, it should look like this: For changes to take effect immediately, source the profile using . $profile. The original SOF solution (and many other places) give this solution: function prompt { &quot;$ESC[93mPS $ESC[36m$($executionContext.SessionState.Path.CurrentLocation)$('&amp;gt;' * ($nestedPromptLevel + 1)) $ESC[0m&quot; } but $('&amp;gt;' * ($nestedPromptLevel + 1)) causes issues. More specifically, the character m appeared automatically after the prompt when I was typing a period . which is undesirable behaviour. TO BE INVESTIGATED. &amp;#8617;</summary></entry></feed>